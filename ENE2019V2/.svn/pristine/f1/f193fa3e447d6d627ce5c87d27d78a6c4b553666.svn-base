package gob.inei.ene2019v2.fragment.ModIII;

import gob.inei.dnce.annotations.FieldAnnotation;
import gob.inei.dnce.components.CheckBoxField;
import gob.inei.dnce.components.DialogComponent;
import gob.inei.dnce.components.Entity;
import gob.inei.dnce.components.Entity.SeccionCapitulo;
import gob.inei.dnce.components.FragmentForm;
import gob.inei.dnce.components.GridComponent;
import gob.inei.dnce.components.IntegerField;
import gob.inei.dnce.components.LabelComponent;
import gob.inei.dnce.components.MasterActivity;
import gob.inei.dnce.components.TableComponent;
import gob.inei.dnce.components.ToastMessage;
import gob.inei.dnce.interfaces.IDetailEntityComponent;
import gob.inei.dnce.util.Calculo;
import gob.inei.dnce.util.Util;
import gob.inei.ene2019v2.R;
import gob.inei.ene2019v2.common.App;
import gob.inei.ene2019v2.fragment.ModIII.dialog.Mod_III_Fragment_01_det;
import gob.inei.ene2019v2.model.Caratula;
import gob.inei.ene2019v2.model.ModuloIII_det;
import gob.inei.ene2019v2.model.Moduloiii01;
import gob.inei.ene2019v2.service.CuestionarioService;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ScrollView;

@SuppressLint("ResourceAsColor") public class Mod_III_Fragment_001_ extends FragmentForm  {

	@FieldAnnotation(orderIndex = 1)
	public IntegerField txtC3P301;
	
	public TableComponent tcCAP1_1;
	private List<DETALLES> lstData;
	private List<ModuloIII_det> lstDetalle;
	private List<String> data = new ArrayList<String>();
	
	private Moduloiii01 bean;
	private Caratula caratula;

	public TableComponent tcTabla1;
	private LabelComponent lblTitulo, lblsubtitulo, lbl1, lblflag1, lblflag2,
			lblflag3, lblflag4, lblflag5, lblflag6, lblflag7, lblflag8,
			lblflag9, lblflag10, lblflag11, lblflag12;
	LinearLayout q0, q1, q2, q3, q4;
	public GridComponent grid, grid2;

	private CuestionarioService cuestionarioService;
	SeccionCapitulo[] seccionesCargadoDocente;

	SeccionCapitulo[] seccionesCargadoTabla2;
	SeccionCapitulo[] seccionesCargado, seccionesGrabadoCheck;
	SeccionCapitulo[] seccionesGrabado, seccionesGrabado2;
	private int contChecks;
	private View viewP3;
	P3_1ClickListener adapter;
	SeccionCapitulo[] campos, camposdelete, secciones;
	// Detalle detalle ;
	private boolean esCargaInicial;

	enum ACTION {
		EJECUTAR_VER1
	}

	private ACTION action;
	private boolean avance1;

	// private List<Integer> desabilita18;

	// Declaracion de variables
	private DialogComponent dc;
	private DialogComponent dialog;

	public Mod_III_Fragment_001_() {
	}

	public Mod_III_Fragment_001_ parent(MasterActivity parent) {
		this.parent = parent;
		return this;
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		rootView = createUI();
		initObjectsWithoutXML(this, rootView);
		enlazarCajas();
		listening();
		adapter = new P3_1ClickListener();
		tcCAP1_1.getListView().setOnItemClickListener(adapter);

		seccionesCargadoDocente = new SeccionCapitulo[] { new SeccionCapitulo(
				-1, -1, -1, "ID", "NIVEL_ID", "ORDEN_INI", "DET_ID") };

		seccionesCargado = new SeccionCapitulo[] { new SeccionCapitulo(-1, -1,
				-1, "ID", "DET_ID", "DDOC_04_001_INI19", "DDOC_04_002_INI19") };

	
		seccionesGrabado2 = new SeccionCapitulo[] { new SeccionCapitulo(-1, -1,
				-1, "DDOC_04_001_INI19", "DDOC_04_002_INI19",
				"DDOC_04_018_INI", "P2_2_4_DIA", "P2_2_4_MES", "P2_2_4_HORA",
				"P2_2_4_MINUTO", "GPS_LONG_P2_2_4", "GPS_LAT_P2_2_4",
				"GPS_ALT_P2_2_4") };
		
		seccionesGrabado = new SeccionCapitulo[] { new SeccionCapitulo(-1, -1,
				-1, "C3P301") };


		campos = new SeccionCapitulo[] { new SeccionCapitulo(-1, -1, -1, "ID",
				"C3P301_ID", "C3P301_ID_ETIQ", "C3P301A", "C3P301A_1", "C3P301A_2",
				"C3P301A_TOT", "C3P301E_1") };
		

		return rootView;
	}

	@Override
	protected void buildFields() {
		lblTitulo = new LabelComponent(this.getActivity(), App.ESTILO)
		.size(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)
		.text(R.string.mod3_titulo).textSize(21).centrar().negrita();

		txtC3P301 = new IntegerField(this.getActivity(), false)
		.size(altoComponente, 100).centrar().negrita();
			
		tcCAP1_1 = new TableComponent(getActivity(),  this,App.ESTILO, true).size(1240, 740);
		tcCAP1_1.addHeader(R.string.c1c300categoria, 3.2f,TableComponent.ALIGN.LEFT);
		tcCAP1_1.addHeader(R.string.c1c300trabajadores, 0.38f,CheckBoxField.class);
		tcCAP1_1.addCallback(2, "tcFuncionRegantes");
		tcCAP1_1.addCallback(3, "tcFuncionRegantes");
		tcCAP1_1.setHeaderHeight(altoComponente + 32);
		tcCAP1_1.setDataColumHeight(altoComponente + 20);

		grid2 = new GridComponent(this.getActivity(), Gravity.CENTER, 1);
		grid2.addComponent(tcCAP1_1.getTableView());
		grid2.colorFondo(R.color.transparent);
		grid2.component();

	}

	@SuppressLint("ResourceAsColor")
	public void tcFuncionRegantes(Object entity, Integer row, Integer opcion)
			throws SQLException {
		if (entity != null) {
			DETALLES tmp = lstData.get(row);
			Log.e ("opcion" , opcion + "");

			if (!Util.esDiferente(opcion, 1)) {
				tmp.detalle.c3p301a = opcion;
				// tmp.detalle.p102_2 = tmp.nombre;
				getCuestionarioService().saveOrUpdate(tmp.detalle, campos);
				refrescarTabla();
			} else {
				// dismissDialog(row);
				tmp.detalle.c3p301a = opcion;
				tmp.detalle.c3p301a_1 = null;
				tmp.detalle.c3p301a_2 = null;				
				tmp.detalle.c3p301a_tot = null;
				tmp.detalle.c3p301e_1 = null;
				// tmp.detalle.p102_2 = tmp.nombre;
				getCuestionarioService().saveOrUpdate(tmp.detalle, campos);
				refrescarTabla();
				// se graba el check cuando se marca NO::
//				seccionesGrabadoCheck = new SeccionCapitulo[] { new SeccionCapitulo(
//						-1, -1, -1, "DDOC_04_001_INI19", "DDOC_04_002_INI19") };
//				
//				getCuestionarioService().saveOrUpdate(bean,	seccionesGrabadoCheck);

			}
		}
	}

	@Override
	protected View createUI() {
		buildFields();
		/* Aca creamos las preguntas */
		q0 = createQuestionSection(lblTitulo);
		q1 = createQuestionSection(R.string.mod3_preg1, Gravity.CENTER
				| Gravity.CENTER_VERTICAL,txtC3P301, grid2);

		ScrollView contenedor = createForm();
		LinearLayout form = (LinearLayout) contenedor.getChildAt(0);
		/* Aca agregamos las preguntas a la pantalla */
		form.addView(q0);
		form.addView(q1);
		/* Aca agregamos las preguntas a la pantalla */
		return contenedor;
	}

	@Override
	public boolean grabar() {
		uiToEntity(bean);
		if (!validar()) {
			if (error) {
				if (!mensaje.equals(""))
					ToastMessage.msgBox(this.getActivity(), mensaje,
							ToastMessage.MESSAGE_ERROR,
							ToastMessage.DURATION_LONG);
				if (view != null)
					view.requestFocus();
			}
			return false;
		}
	
		try {
		
				if (!getCuestionarioService().saveOrUpdate(bean,
						seccionesGrabado)) {
					ToastMessage.msgBox(this.getActivity(),
							"Los datos no pudieron ser guardados.",
							ToastMessage.MESSAGE_INFO,
							ToastMessage.DURATION_SHORT);
					return false;
				}
			

		} catch (SQLException e) {
			ToastMessage.msgBox(this.getActivity(), e.getMessage(),
					ToastMessage.MESSAGE_INFO, ToastMessage.DURATION_SHORT);
			return false;
		}
		return true;
	}

	private boolean validar() {
		error = false;
		if (!isInRange())
			return false;

		String preguntaVacia = this.getResources().getString(R.string.pregunta_no_vacia);
		String pregunta_no_vacia = getString(R.string.pregunta_no_vacia);
		
		if (Util.esVacio(txtC3P301)) {
		mensaje = pregunta_no_vacia.replace("$", "Pregunta 301");
		view = txtC3P301;
		return !(error = true);
	}
		
		int valor1 = 0;

		for (int x = 0; x < lstData.size(); x++) {
	//		if (!Util.esDiferente(lstData.get(x).detalle.c3p301_id, 1, 2, 3, 4,	5, 6)) {
//				if (Util.esVacio(lstData.get(x).detalle.c3p301a)) {
//					ToastMessage.msgBox(this.getActivity(),
//							"“Ingresar Información Correspondiente a la Pregunta:”"
//									+ "\n" + lstData.get(x).nombre,
//							ToastMessage.MESSAGE_INFO,
//							ToastMessage.DURATION_LONG);
//					view = tcCAP1_1;
//					error = true;
//					return false;
//				}
				if (!Util.esDiferente(lstData.get(x).detalle.c3p301a, 1)) {
					if (Util.esVacio(lstData.get(x).detalle.c3p301a_1)) {
						ToastMessage.msgBox(this.getActivity(),
								"“Ingresar Información Correspondiente a la Pregunta:”"
										+ "\n" + lstData.get(x).nombre,
								ToastMessage.MESSAGE_INFO,
								ToastMessage.DURATION_LONG);
						view = tcCAP1_1;
						error = true;
						return false;
					}
				}

				if (Util.esDiferente(lstData.get(x).detalle.c3p301a, 1)) {
					valor1++;
				}

	//		}
		}

		Log.e("valor1", valor1 + "");
//		if (valor1 == 11) {
//			ToastMessage
//					.msgBox(this.getActivity(),
//							"“Debe tener al menos un  seleccionado  ",
//							ToastMessage.MESSAGE_INFO,
//							ToastMessage.DURATION_LONG);
//			view = tcCAP1_1;
//			error = true;
//			return false;
//		}

		// if (Util.verificaNoVacio(getViews("001"), CheckBoxField.class) ==
		// null) {
		// mensaje = "ERROR: DEBE DE HABER UNA ALTERNATIVA MARCADA";
		// view = chbDDOC_04_001_INI19;
		// error = true;
		// return false;
		// }
		//
		// if (Util.verificaNoVacio(getViews("002"), CheckBoxField.class) ==
		// null) {
		// mensaje = "ERROR: DEBE DE HABER UNA ALTERNATIVA MARCADA";
		// view = chbDDOC_04_002_INI19;
		// error = true;
		// return false;
		// }

		return true;
	}

	private class P3_1ClickListener implements OnItemClickListener {

		public P3_1ClickListener() {
		}

		@Override
		public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
				long arg3) {
			// C2_Cap02_04_det c = (C2_Cap02_04_det) lstDetalle.get(arg2);
			DETALLES c = (DETALLES) lstData.get(arg2);
			
			if ( Util.getInt(arg2)==5 || Util.getInt(arg2)==11 || Util.getInt(arg2)==12  )  {
				return;
			}
			
			if ( Util.esDiferente(c.detalle.c3p301a, 1) ) {
				return;
			}
			
			Log.e ("detalle.c3p301a" , c.detalle.c3p301a +"");
			Log.e ("el arg2" , arg2 +"");
			abrirDetalle(arg2);
		}
	}

	private void abrirDetalle(int index) {
		FragmentManager fm = getFragmentManager();
		Mod_III_Fragment_01_det aperturaDialog = Mod_III_Fragment_01_det
				.newInstance(this, (DETALLES) lstData.get(index), index,bean);
		aperturaDialog.setAncho(LinearLayout.LayoutParams.MATCH_PARENT);
		aperturaDialog.show(fm, "aperturaDialog");
	}

	@Override
	public void cargarDatos() {
				
		caratula = App.getInstance().getEmpresa();

		bean = getCuestionarioService().getModuloiii01(
				App.getInstance().getEmpresa(),
				new Moduloiii01().getSecCap(getListFields(this)));
		
		if (bean == null) {
			bean = new Moduloiii01();
			bean.id = App.getInstance().getEmpresa().id;
		}
		
		entityToUI(bean);

		lstDetalle = getCuestionarioService().getModuloIII_det(
				bean, campos);
		// carga array
		data = Arrays.asList(getResources().getStringArray(
				R.array.c1c300trabajadores_item));

		lstData = new ArrayList<Mod_III_Fragment_001_.DETALLES>();

		List<DETALLES> lste = new ArrayList<DETALLES>();
		boolean flag = false;
		for (int x = 0, i = 0; x < data.size() && i < 14; i++, x++) {
			if (lstDetalle != null && lstDetalle.size() > 0) {
				flag = false;
				for (ModuloIII_det ac : lstDetalle) {
					if (Util.getInt(ac.c3p301_id_etiq, 0) == x + 1) {
						lste.add(new DETALLES(i + 1, x + 1, data.get(x), ac));
						flag = true;
						break;
					}
				}
				if (!flag) {
					lste.add(new DETALLES(i + 1, x + 1, data.get(x),
							new ModuloIII_det(
									App.getInstance().getEmpresa().id,
									 i + 1, x + 1)));
				}
			} else {
				lste.add(new DETALLES(i + 1, x + 1, data.get(x),
						new ModuloIII_det(App.getInstance().getEmpresa().id,
								 i + 1, x + 1)));
			}
		}
		lstData.addAll(lste);
		
		
		inicio();
		refrescarTabla();

	}

	public void reloadData() {
		tcCAP1_1.reloadData();
		// setBorder();
	}

	public void refrescarTabla() {
		tcCAP1_1.setData(lstData, "getNombre", "getOpcion");
		tcCAP1_1.setBorderBlock(true,0,5,11,12);
		tcCAP1_1.setBorderBlock(true,1,5,11,12);
		tcCAP1_1.setBorderBlock(true,2,5,11,12);
		tcCAP1_1.setCellColor(5, -1, R.color.celesteclarito, true);
		tcCAP1_1.setCellColor(11, -1, R.color.celesteclarito, true);
		tcCAP1_1.setCellColor(12, -1, R.color.celesteclarito, true);
		setBorder();
		totales();
		registerForContextMenu(tcCAP1_1.getListView());
	}

	public void recarga() {

		lstDetalle = getCuestionarioService().getModuloIII_det(
				bean, campos);
		// carga array
		data = Arrays.asList(getResources().getStringArray(
				R.array.c1c300trabajadores_item));

		lstData = new ArrayList<Mod_III_Fragment_001_.DETALLES>();

		List<DETALLES> lste = new ArrayList<DETALLES>();
		boolean flag = false;
		for (int x = 0, i = 0; x < data.size() && i < 14; i++, x++) {
			if (lstDetalle != null && lstDetalle.size() > 0) {
				flag = false;
				for (ModuloIII_det ac : lstDetalle) {
					if (Util.getInt(ac.c3p301_id_etiq, 0) == x + 1) {
						// Log.e("ac.c3p301_id:::",
						// String.valueOf(ac.c3p301_id));
						lste.add(new DETALLES(i + 1, x + 1, data.get(x), ac));
						flag = true;
						break;
					}
				}
				if (!flag) {
					lste.add(new DETALLES(i + 1, x + 1, data.get(x),
							new ModuloIII_det(
									App.getInstance().getEmpresa().id,
									 i + 1, x + 1)));
				}
			} else {
				lste.add(new DETALLES(i + 1, x + 1, data.get(x),
						new ModuloIII_det(App.getInstance().getEmpresa().id,
								 i + 1, x + 1)));
			}
		}
		lstData.addAll(lste);
	}

	public class DETALLES extends Entity implements IDetailEntityComponent {
		private static final long serialVersionUID = 1L;
		public int codigo;
		public int orden;
		public String nombre;
		public ModuloIII_det detalle;

		public DETALLES() {
			// TODO Auto-generated constructor stub
		}

		public DETALLES(Integer codigo, Integer orden, String nombre,
				ModuloIII_det detalle) {
			this.codigo = codigo;
			this.orden = orden;
			this.nombre = nombre;
			this.detalle = detalle;
		}

		public DETALLES(Integer orden, String nombre, ModuloIII_det detalle) {
			this.orden = orden;
			this.nombre = nombre;
			this.detalle = detalle;
		}

		public String getNombre() {
			return nombre == null ? "" : nombre;
		}
		
		public String getOpcion() {
			return (detalle.c3p301a == null ? "0" : String.valueOf(detalle.c3p301a));
		}

		@Override
		public boolean isTitle() {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public void cleanEntity() {
			detalle.c3p301a = null;
			detalle.c3p301a_1 = null;
			detalle.c3p301a_2 = null;
			detalle.c3p301a_tot = null;
			detalle.c3p301e_1 = null;
		}
	}

	private void inicio() {
		
		tcCAP1_1.setBorderBlock(true,0,5,11,12);
		tcCAP1_1.setBorderBlock(true,1,5,11,12);
		tcCAP1_1.setBorderBlock(true,2,5,11,12);
		tcCAP1_1.setCellColor(5, -1, R.color.celesteclarito, true);
		tcCAP1_1.setCellColor(11, -1, R.color.celesteclarito, true);
		tcCAP1_1.setCellColor(12, -1, R.color.celesteclarito, true);
	}

	private void setBorder() {
		for (int x = 0; x < lstData.size(); x++) {
			DETALLES detalles = lstData.get(x);
			// if (!Util.esDiferente(detalles.orden, 1, 2, 5, 8, 9, 11)) {
			// if (!Util.esDiferente(detalles.orden, 1, 2, 5, 8, 9,10, 11)) {
			Log.e("bb", x + " - " +   lstData.get(x).detalle.c3p301a + "");
		//	Log.e("cc", lstData.get(x).detalle.c3p301a_1 + "");
			
			if (!Util.esDiferente(lstData.get(x).detalle.c3p301a, 1)
					&& !Util.esVacio(lstData.get(x).detalle.c3p301a_1)) {
				tcCAP1_1.setBorderRow(x);
			} else if (!Util.esDiferente(lstData.get(x).detalle.c3p301a, 1)
					&& Util.esVacio(lstData.get(x).detalle.c3p301a_1)) {
				tcCAP1_1.setBorderRow(x, false);
			}
		}
	}
	
	
	private void totales() {
		int total01_05 = 0;
		int total01_05m = 0;
		int total07_11 = 0;
		int total06_12 = 0;
		for (int x = 0; x < lstData.size(); x++) {
			DETALLES tmp = lstData.get(x);

			total01_05 = Util.getInt(lstData.get(0).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(1).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(2).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(3).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(4).detalle.c3p301a_tot);
			
			total01_05m = Util.getInt(lstData.get(0).detalle.c3p301a_2)
					+ Util.getInt(lstData.get(1).detalle.c3p301a_2)
					+ Util.getInt(lstData.get(2).detalle.c3p301a_2)
					+ Util.getInt(lstData.get(3).detalle.c3p301a_2)
					+ Util.getInt(lstData.get(4).detalle.c3p301a_2);
			

			total07_11 = Util.getInt(lstData.get(6).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(7).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(8).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(9).detalle.c3p301a_tot)
					+ Util.getInt(lstData.get(10).detalle.c3p301a_tot);

			 total06_12 = total01_05 + total07_11;

			lstData.get(5).detalle.c3p301a_tot = total01_05;
			lstData.get(11).detalle.c3p301a_tot = total07_11;
			lstData.get(12).detalle.c3p301a_tot = total06_12;

			if (Util.getInt(lstData.get(x)) == 5) {
		//	Log.e ("entro " ," position 5");
				tmp.detalle.c3p301_id = 5;
				tmp.detalle.c3p301a_tot = total01_05;
				tmp.detalle.c3p301a_2 = total01_05m;
			}

			if (Util.getInt(lstData.get(x)) == 11) {
		//		Log.e ("entro " ," position 11");
				tmp.detalle.c3p301_id = 11;
				tmp.detalle.c3p301a_tot = total07_11;
			}

			if (Util.getInt(lstData.get(x)) == 12) {
				Log.e ("entro " ," position 12");
				tmp.detalle.c3p301_id = 12;
				tmp.detalle.c3p301a_tot = total06_12;
			}

			try {
				if (!getCuestionarioService().saveOrUpdate(tmp.detalle, campos)) {
					ToastMessage.msgBox(this.getActivity(),
							"Los datos no se guardaron ",
							ToastMessage.MESSAGE_ERROR,
							ToastMessage.DURATION_LONG);
				}

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	public CuestionarioService getCuestionarioService() {
		if (cuestionarioService == null) {
			cuestionarioService = CuestionarioService
					.getInstance(getActivity());
		}
		return cuestionarioService;
	}

	public void onCancel() {
		// TODO Auto-generated method stub
		if (action == ACTION.EJECUTAR_VER1) {
			return;
		}
	}

	public void onAccept() {
		// TODO Auto-generated method stub

	}
	



}
